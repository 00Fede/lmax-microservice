AWSTemplateFormatVersion: '2010-09-09'
Description: Infraestructura para microservicio en Java 17 con balanceo de carga y descarga de JAR desde S3.

Parameters:
  VPC:
    Type: String
    Description: ID de la VPC (aws-landing-zone-VPC)
    Default: vpc-0a86fae87f9c30ac9

  PrivateSubnet1:
    Type: String
    Description: ID de la Subnet Privada 1 (aws-landing-zone-PrivateSubnet1A)
    Default: subnet-0c25c786062fba710

  PrivateSubnet2:
    Type: String
    Description: ID de la Subnet Privada 2 (aws-landing-zone-PrivateSubnet2A)
    Default: subnet-0fda3664c3f4b5124

  PrivateSubnet3:
    Type: String
    Description: ID de la Subnet Privada 3 (aws-landing-zone-PrivateSubnet3A)
    Default: subnet-019a15514f1324b9c

  PublicSubnet1:
    Type: String
    Description: ID de la Subnet Publica 1 (aws-landing-zone-PublicSubnet1)
    Default: subnet-0150db955cb70a5fd

  PublicSubnet2:
    Type: String
    Description: ID de la Subnet Publica 2 (aws-landing-zone-PublicSubnet2)
    Default: subnet-06758f7720dbf15e3

  PublicSubnet3:
    Type: String
    Description: ID de la Subnet Publica 3 (aws-landing-zone-PublicSubnet3)
    Default: subnet-0b303114e38d813d1

  S3Bucket:
    Type: String
    Default: "arquitectura-de-software-bucket"
    Description: Nombre del bucket donde estÃ¡ el JAR.

  S3Key:
    Type: String
    Default: "reto_1/lmax-microservice-0.0.1-SNAPSHOT.jar"
    Description: Ruta del JAR dentro del bucket.

  KeyPairName:
    Type: String
    Description: Nombre del KeyPair para conectar a las instancias EC2
    Default: alcarami

Resources:
  # IAM Role para la instancia EC2 con permisos de lectura en S3 y SSM
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/Lz-Governance-Boundary
      RoleName: MicroserviceEC2Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3ReadAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${S3Bucket}/${S3Key}"

  # Instance Profile para asociar el Role a las instancias EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # Security Group para las instancias EC2
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite trafico desde el Load Balancer y SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Security Group para el ALB
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite trafico HTTP externo
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: Microservicio-ALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application

  # Target Group para las instancias
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 8080
      Protocol: HTTP
      TargetType: instance
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3

  # Listener del Load Balancer
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Launch Template para las instancias EC2
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-04681163a08179f28  # Amazon Linux 2 AMI
        InstanceType: t2.medium
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y java-17-amazon-corretto aws-cli
            aws s3 cp s3://${S3Bucket}/${S3Key} /home/ec2-user/app.jar
            nohup java -jar /home/ec2-user/app.jar > /home/ec2-user/app.log 2>&1

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 3
      MaxSize: 3
      DesiredCapacity: 3
      TargetGroupARNs:
        - !Ref TargetGroup

Outputs:
  ALBEndpoint:
    Description: URL del Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName